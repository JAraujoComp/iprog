def init(settings, game):
 '''Initializes the board'''
 for x in range(settings["line"]):
  game.append([])
  for y in range(settings["col"]):
  game[x].append("-")

  #game[line number][collumn number]

def defSettings(settings, jump):
 '''Defines Settings'''
 settings["line"] = 4 #change line here
 settings["col"] = 5  #change columns here
 #jump False uses default settings
 if jump == True:
  #asks player for settings
  settings["play1"] = raw_input("Player 1 name: ")
  settings["play1s"] = raw_input(settings["play1"]+"'s symbol: ")
  settings["play2"] = raw_input("Player 2 name: ")
  settings["play2s"] = raw_input(settings["play2"]+"'s symbol: ")
  settings["4or3"] = int(raw_input("Connect 3 or 4? (3/4): "))
  settings["diag"] = raw_input("Diagonal win condition? (y/n): ")
 else:
  #sets settings as default
  settings["play1"] = "Player 1"
  settings["play1s"] = "x"
  settings["play2"] = "Player 2"
  settings["play2s"] = "o"
  settings["4or3"] = 3
  settings["diag"] = "y"
  
def play(settings,player):
 '''Changes the board / Plays the game'''
 change = -1
 
 while change <= 0 or change > settings["col"]:
     change = int(raw_input(str(player)+"'s turn: "))-1

 #checks each line for an empty spot called by player and changes it
 for x in range(settings["line"]):
  if game[x][change] == "-":
   if player == settings["play1"]:
    game[x][change] = settings["play1s"]
   elif player == settings["play2"]:
    game[x][change] = settings["play2s"]
  #checks if player tried to place chip over board
  else:
      print "\nINVALID MOVE"

def prt(settings):
 

 

def main():
 #initializes variables
 settings = {}
 game = []
 
 defSettings(settings, False)
 init(settings,game)
 #defines the starting player
 player = settings["play1"]
 #processes a play
 play(settings,player)
 #prints the board
 prt(settings)
 #changes player
 chplayer(player)


if __name__ == "__main__":
 main()

